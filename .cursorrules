# RecipeAI - Cursor Rules
# Smart Recipe Manager with AI - Next.js 15 Project

## Project Context
You are working on RecipeAI, a Smart Recipe Manager with AI integration. This is a Next.js 15 app with TypeScript, Tailwind CSS, shadcn/ui, Supabase, and OpenAI integration.

## Core Technologies
- Next.js 15 (App Router)
- TypeScript (strict mode)
- Tailwind CSS + shadcn/ui
- Supabase + Prisma ORM
- React Hook Form + Zod
- OpenAI API integration
- pnpm package manager

## Development Principles

### Component Philosophy
- Keep components simple and functional initially
- Focus on functionality over complex styling
- Use basic Tailwind classes for layout
- Save detailed styling for later iterations
- Prioritize accessibility and semantic HTML

### Next.js 15 Patterns
- Use App Router exclusively (app directory)
- Default to Server Components, use Client Components when needed
- Use Server Actions for form submissions and mutations
- Implement proper loading.tsx, error.tsx, and not-found.tsx
- Follow Next.js 15 conventions for file organization

### TypeScript Standards
- Use strict TypeScript configuration
- Create interfaces in dedicated types/ directory
- Avoid `any` - use proper typing or `unknown`
- Define API response types
- Use generic types appropriately

### File Structure
```
src/
├── app/                 # Next.js 15 app directory
│   ├── (auth)/         # Auth route group
│   ├── (dashboard)/    # Protected routes
│   ├── api/            # API routes
│   └── globals.css
├── components/         # Reusable components
│   ├── ui/            # shadcn/ui base components
│   ├── recipe/        # Recipe-specific components
│   ├── forms/         # Form components
│   └── layout/        # Layout components
├── lib/               # Utilities and configs
│   ├── auth.ts        # Authentication
│   ├── db.ts          # Database config
│   └── ai.ts          # AI service integration
├── hooks/             # Custom React hooks
├── types/             # TypeScript definitions
├── utils/             # Helper functions
└── constants/         # App constants
```

### React Patterns
- Use functional components with hooks
- Custom hooks for reusable logic
- Controlled components for forms
- Proper key props for lists
- Use React.memo sparingly, only when needed

### State Management
- React built-in state for component-level
- Zustand for global state (if needed)
- React Query for server state
- Server Actions for mutations

### Form Handling
- Use React Hook Form + Zod for validation
- Server Actions for form submissions
- Proper error handling and user feedback
- Accessible form design

### API Integration
- Environment variables for API keys
- Proper error handling for API calls
- Rate limiting considerations
- Fallbacks when APIs are unavailable
- Type-safe API responses

### Supabase Patterns
- Use Prisma ORM for type-safe database queries
- Implement RLS (Row Level Security) policies
- Use Supabase Auth for authentication
- Optimize queries with proper indexing

### AI Integration Best Practices
- Secure API key handling
- Implement proper error boundaries
- Provide loading states for AI operations
- Graceful degradation when AI is unavailable
- Rate limiting and cost management

### Styling Guidelines
- Use Tailwind utility classes
- Start with basic, functional styling
- Use shadcn/ui components as base
- Responsive design (mobile-first)
- Semantic color usage
- Consistent spacing scale

### Code Quality
- Meaningful variable and function names
- Small, focused functions
- Proper error handling
- Document complex business logic
- Use TypeScript strict mode

### Performance Considerations
- Use Next.js Image component for images
- Implement proper loading states
- Code splitting with React.lazy
- Optimize database queries
- Minimize re-renders

### Security
- Validate all inputs with Zod
- Sanitize user content
- Secure API routes
- Implement proper authentication
- Use environment variables for secrets

## Recipe App Specific Rules

### Recipe Data Structure
- Use consistent recipe schema
- Implement proper ingredient parsing
- Handle recipe steps as structured data
- Include metadata (cooking time, difficulty, etc.)

### AI Features Implementation
- Recipe categorization with fallbacks
- Ingredient extraction with validation
- Recipe generation with user preferences
- Nutritional analysis integration

### User Experience
- Clear loading states for AI operations
- Intuitive recipe browsing and search
- Responsive design for mobile cooking
- Offline-friendly features where possible

### Error Handling
- Graceful AI service failures
- User-friendly error messages
- Retry mechanisms for failed operations
- Fallback content when data unavailable

## Naming Conventions
- Files: kebab-case (recipe-card.tsx)
- Components: PascalCase (RecipeCard)
- Functions/variables: camelCase (getUserRecipes)
- Constants: UPPER_SNAKE_CASE (API_BASE_URL)
- Types: PascalCase (RecipeData)

## Git Workflow
- Use conventional commit messages
- Feature branches for development
- Atomic commits
- Descriptive commit messages

Focus on building a solid foundation with these principles. Prioritize functionality and user experience over complex styling initially.
